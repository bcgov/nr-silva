x-frontend: &frontend
  environment:
    VITE_ZONE: DEV
    VITE_USER_POOLS_ID: ca-central-1_t2HSZBHur
    VITE_USER_POOLS_WEB_CLIENT_ID: 3g6n2ha1loi4kp1jhaq359vrvb
    VITE_BACKEND_URL: http://localhost:8080
  healthcheck:
    test: curl http://localhost:3000"
    interval: 15s
    timeout: 5s
    retries: 5
  restart: always

x-backend: &backend
  healthcheck:
    test: curl -f http://localhost:8080/actuator/health | grep '"status":"UP"'
    interval: 5s
    timeout: 5s
    retries: 5
  #restart: always

x-db-vars: &db-vars
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: default
  POSTGRES_DB: postgres

services:
  frontend:
    container_name: frontend
    entrypoint: sh -c "npm ci && npm run start"
    image: node:20-bullseye@sha256:ce61e37b353643c4a0a3c68b7190803824ebcd9e3015478392c12dacfc911be7
    ports: [ "3000:3000" ]
    volumes: [ "./frontend:/app", "/app/node_modules" ]
    working_dir: "/app"
    <<: *frontend

  caddy:
    container_name: caddy
    profiles: [ "caddy" ]
    build: ./frontend
    ports: [ "3005:3000" ]
    volumes: [ "./frontend/Caddyfile:/etc/caddy/Caddyfile" ]
    <<: *frontend

  backend:
    container_name: backend
    entrypoint: sh -c './startup.sh'
    #image: maven:3.9.6-amazoncorretto-21
    image: maven:3.9.9-eclipse-temurin-17@sha256:75c4d813eab02660a1dd7c5af04c2531db326b2b2998fa48082303cb28c1022c
    network_mode: host
    volumes:
      - ./backend:/app
      - $HOME/zscaler-certs:/certs
    working_dir: /app
    environment:
      DATABASE_HOST: nrcdb03.bcgov
      DATABASE_PORT: "1543"
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      SERVICE_NAME: dbq01.nrs.bcgov
      ORACLEDB_KEYSTORE: /app/jssecacerts
      ORACLEDB_SECRET: changeit
      AWS_COGNITO_ISSUER_URI: https://cognito-idp.ca-central-1.amazonaws.com/ca-central-1_t2HSZBHur
      POSTGRES_HOST: localhost
      DASHBOARD_JOB_IDIR_USERS: ${DASHBOARD_JOB_IDIR_USERS}
      <<: *db-vars
    <<: *backend

  database:
    container_name: database
    environment:
      <<: *db-vars
    volumes: [ "/pgdata" ]
    ports: [ "5432:5432" ]
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      timeout: 5s
      retries: 5
    image: postgis/postgis:13-master@sha256:030cb327736b4f06b6f8d5d33ebd4f8818e73c1bdf9a70ba55944df60c54ba5c

  backend-native:
    container_name: backend-native
    profiles: [ "native" ]
    build: ./backend
    ports: [ "8080:8080" ]
    <<: *backend

  wiremock:
    image: "wiremock/wiremock:latest@sha256:8d9a0330e4de2f9e2035fc290df0a370ac7c2a92072a6c8752a42597310edb09"
    container_name: forest-client-api-stub
    ports: [ "9000:9000", "9001:9001" ]
    volumes:
      - ./stub/:/home/wiremock/
    entrypoint: [ "/docker-entrypoint.sh", "--enable-stub-cors", "--global-response-templating", "--port", "9000", "--https-port", "9001", "--verbose" ]

  legacydb:
    # profiles ensure the legacydb won't run on default `docker compose up`
    # To start the legacy db along with other services, use `docker compose --profile legacy up`
    profiles: [ "legacy" ]
    container_name: oracle
    environment:
      APP_USER_PASSWORD: default
      APP_USER: THE
      ORACLE_RANDOM_PASSWORD: yes
    platform: "linux/amd64"
    image: gvenzl/oracle-free:23.7-full-faststart@sha256:7b313ef05800e6c6be1b1cca1e323e3162704e12db4330ac9697600eab3e5b6c
    ports: [ 1521:1521 ]
    volumes: [ /opt/oracle/oradata ]
    healthcheck:
      test: [ "CMD-SHELL", "healthcheck.sh" ]
      interval: 5s
      timeout: 10s
      retries: 10
