version: '3.9'

x-frontend: &frontend
  environment:
    VITE_ZONE: TEST
  healthcheck:
    test: curl http://localhost:3000"
    interval: 15s
    timeout: 5s
    retries: 5
  restart: always

x-backend: &backend
  ports: ["8080:8080"]
  healthcheck:
    test: curl -f http://localhost:8080/actuator/health | grep '"status":"UP"'
    interval: 5s
    timeout: 5s
    retries: 5
  restart: always

x-db-vars: &db-vars
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: default
  POSTGRES_DB: postgres

services:
  frontend:
    container_name: frontend
    entrypoint: sh -c "npm ci && npm run start"
    image: node:20-bullseye
    ports: ["3000:3000"]
    volumes: ["./frontend:/app", "/app/node_modules"]
    working_dir: "/app"
    <<: *frontend

  caddy:
    container_name: caddy
    profiles: ["caddy"]
    build: ./frontend
    ports: ["3005:3000"]
    volumes: ["./frontend/Caddyfile:/etc/caddy/Caddyfile"]
    <<: *frontend

  backend:
    container_name: backend
    depends_on:
      database:
        condition: service_healthy
    entrypoint: mvn -ntp spring-boot:run -Dspring-boot.run.jvmArguments="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n"
    image: maven:3.9.6-amazoncorretto-21
    volumes: ["./backend:/app"]
    working_dir: /app
    environment:
      POSTGRES_HOST: database
      <<: *db-vars
    <<: *backend

  backend-native:
    container_name: backend-native
    profiles: ["native"]
    build: ./backend
    <<: *backend

  database:
    container_name: database
    environment:
      <<: *db-vars
    volumes: ["/pgdata"]
    ports: ["5432:5432"]
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      timeout: 5s
      retries: 5
    image: postgis/postgis:13-master
