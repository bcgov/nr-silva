apiVersion: template.openshift.io/v1
kind: Template
parameters:
  - name: NAME
    description: Module name
    value: nr-silva
  - name: COMPONENT
    description: Component name
    value: frontend
  - name: ORG
    description: Organization name, e.g. bcgov
    value: bcgov
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: FAM_ROUTE
    description: Custom route ZONE for FAM
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: "25m"
  - name: MEMORY_REQUEST
    value: "50Mi"
  - name: MIN_REPLICAS
    description: The minimum amount of replicas for the horizontal pod autoscaler.
    value: "3"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas for the horizontal pod autoscaler.
    value: "5"
  - name: TAG
    description: Image tag; e.g. PR number, latest or prod
    required: true
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: LOG_LEVEL
    description: Caddy logging level DEBUG, INFO, WARN, ERROR, PANIC, and FATAL (https://github.com/caddyserver/caddy/blob/master/logging.go)
    value: "info"
  - name: VITE_ZONE
    value: DEV
  - name: RANDOM_EXPRESSION
    description: Random expression to make sure deployments update
    from: "[a-zA-Z0-9]{32}"
    generate: expression
objects:
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: "${NAME}-${ZONE}-${COMPONENT}"
      strategy:
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: "${NAME}-${ZONE}"
            deployment: "${NAME}-${ZONE}-${COMPONENT}"
        spec:
          containers:
            - name: ${NAME}-${ZONE}-${COMPONENT}
              image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${TAG}
              securityContext:
                capabilities:
                  add: ["NET_BIND_SERVICE"]
              imagePullPolicy: Always
              env:
                - name: LOG_LEVEL
                  value: "${LOG_LEVEL}"
                - name: VITE_BACKEND_URL
                  value: "https://${NAME}-${ZONE}-backend.${DOMAIN}"
                - name: VITE_ZONE
                  value: "${ZONE}"
                - name: RANDOM_EXPRESSION
                  value: ${RANDOM_EXPRESSION}
                - name: VITE_USER_POOLS_WEB_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-frontend
                      key: vite-user-pools-web-client-id
                - name: VITE_USER_POOLS_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-frontend
                      key: vite-user-pools-id
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 5
                periodSeconds: 2
                timeoutSeconds: 2
                successThreshold: 1
                failureThreshold: 30
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 5
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deployment: "${NAME}-${ZONE}-${COMPONENT}"
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      host: "${NAME}-${FAM_ROUTE}-${COMPONENT}.${DOMAIN}"
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: "${NAME}-${ZONE}-${COMPONENT}"
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      labels:
        app: "${NAME}-${ZONE}"
      name: "${NAME}-${ZONE}-${COMPONENT}"
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: Deployment
        name: ${NAME}-${ZONE}-${COMPONENT}
      minReplicas: "${{MIN_REPLICAS}}"
      maxReplicas: "${{MAX_REPLICAS}}"
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 100
