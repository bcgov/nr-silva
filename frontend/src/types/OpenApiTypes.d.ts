/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/api/openings/recent/{openingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["recordUserViewedOpening"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/favourites/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["checkFavorite"];
        put: operations["addToFavorites"];
        post?: never;
        delete: operations["removeFromFavorites"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/submission-trends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningsSubmissionTrends"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/tombstone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningTombstone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/tenures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTenures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/ssu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningSsu"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/disturbances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningDisturbances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/cover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCover"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/cover/{forestCoverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCoverDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningActivities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/activities/{atuId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningActivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["openingSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserRecentOpenings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/map/{openingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningPolygonAndProperties"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/favourites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFavorites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forest-clients/{clientNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getForestClient"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forest-clients/{clientNumber}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getForestClientLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forest-clients/byNameAcronymNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchForestClients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/codes/org-units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningOrgUnits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/codes/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        OpeningsPerYearDto: {
            /** Format: int32 */
            month: number;
            /** Format: int32 */
            year: number;
            /** Format: int64 */
            amount: number;
            statusCounts: {
                [key: string]: number;
            };
        };
        CodeDescriptionDto: {
            code: string | null;
            description: string | null;
        };
        CommentDto: {
            commentSource: components["schemas"]["CodeDescriptionDto"];
            commentType: components["schemas"]["CodeDescriptionDto"];
            commentText: string | null;
        };
        ForestClientDto: {
            clientNumber: string;
            clientName: string;
            legalFirstName: string;
            legalMiddleName: string;
            clientStatusCode: components["schemas"]["CodeDescriptionDto"];
            clientTypeCode: components["schemas"]["CodeDescriptionDto"];
            acronym: string;
            name?: string;
        };
        OpeningDetailsNotificationDto: {
            title: string | null;
            description: string | null;
            /**
             * @description Represents the status of a notification in the opening details.
             * @enum {string}
             */
            status: "ERROR" | "WARNING" | "INFO" | "SUCCESS";
        };
        OpeningDetailsOverviewDto: {
            opening: components["schemas"]["OpeningDetailsOverviewOpeningDto"];
            milestones: components["schemas"]["OpeningDetailsOverviewMilestoneDto"];
        };
        OpeningDetailsOverviewMilestoneDto: {
            standardsUnitId: string | null;
            /** Format: date */
            postHarvestDeclaredDate: string | null;
            /** Format: date */
            regenDeclaredDate: string | null;
            /** Format: int32 */
            regenOffsetYears: number | null;
            /** Format: date */
            regenDueDate: string | null;
            /** Format: date */
            freeGrowingDeclaredDate: string | null;
            /** Format: int32 */
            freeGrowingOffsetYears: number | null;
            /** Format: date */
            freeGrowingDueDate: string | null;
        };
        OpeningDetailsOverviewOpeningDto: {
            licenseeId: string | null;
            tenureType: components["schemas"]["CodeDescriptionDto"];
            managementUnitType: components["schemas"]["CodeDescriptionDto"];
            managementUnitId: string | null;
            timberSaleOffice: components["schemas"]["CodeDescriptionDto"];
            comments: components["schemas"]["CommentDto"][];
        };
        OpeningDetailsTombstoneDto: {
            openingNumber: string | null;
            openingStatus: components["schemas"]["CodeDescriptionDto"];
            orgUnitCode: string | null;
            orgUnitName: string | null;
            openCategory: components["schemas"]["CodeDescriptionDto"];
            client: components["schemas"]["ForestClientDto"];
            fileId: string | null;
            cutBlockID: string | null;
            cuttingPermitId: string | null;
            timberMark: string | null;
            maxAllowedAccess: string | null;
            /** Format: float */
            openingGrossArea: number | null;
            createdBy: string | null;
            /** Format: date */
            createdOn: string | null;
            /** Format: date */
            lastUpdatedOn: string | null;
            /** Format: date */
            disturbanceStartDate: string | null;
        };
        OpeningDetailsTombstoneOverviewDto: {
            /** Format: int64 */
            openingId: number;
            tombstone: components["schemas"]["OpeningDetailsTombstoneDto"];
            overview: components["schemas"]["OpeningDetailsOverviewDto"];
            notifications: components["schemas"]["OpeningDetailsNotificationDto"][];
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        OpeningDetailsTenureDto: {
            /** Format: int64 */
            id: number;
            primaryTenure: boolean;
            fileId: string | null;
            cutBlock: string | null;
            cuttingPermit: string | null;
            timberMark: string | null;
            status: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            plannedGrossArea: number | null;
            /** Format: float */
            plannedNetArea: number | null;
        };
        OpeningDetailsTenuresDto: {
            primary: components["schemas"]["OpeningDetailsTenureDto"];
            content: components["schemas"]["OpeningDetailsTenureDto"][];
            page: components["schemas"]["SimplePageDto"];
            /** Format: int64 */
            totalUnfiltered: number | null;
        };
        SimplePageDto: {
            /** Format: int64 */
            size: number;
            /** Format: int64 */
            number: number;
            /** Format: int64 */
            totalElements: number;
            /** Format: int64 */
            totalPages: number;
        };
        OpeningDetailsBecDto: {
            becZoneCode: string | null;
            becSubzoneCode: string | null;
            becVariant: string | null;
            becPhase: string | null;
            becSiteSeries: string | null;
            becSiteType: string | null;
            becSeral: string | null;
        };
        OpeningDetailsStockingDetailsDto: {
            stockingStandardUnit: string | null;
            /** Format: int64 */
            ssid: number | null;
            defaultMof: boolean;
            manualEntry: boolean;
            /** Format: int64 */
            fspId: number | null;
            /** Format: float */
            netArea: number | null;
            /** Format: float */
            soilDisturbancePercent: number | null;
            bec: components["schemas"]["OpeningDetailsBecDto"];
            /** Format: int64 */
            regenDelay: number | null;
            /** Format: int64 */
            freeGrowingLate: number | null;
            /** Format: int64 */
            freeGrowingEarly: number | null;
            additionalStandards: string | null;
            milestones: components["schemas"]["OpeningDetailsStockingDetailsMilestoneDto"];
        };
        OpeningDetailsStockingDetailsMilestoneDto: {
            /** Format: date */
            postHarvestDeclaredDate: string | null;
            /** Format: date */
            regenDeclaredDate: string | null;
            /** Format: int32 */
            regenOffsetYears: number | null;
            /** Format: date */
            regenDueDate: string | null;
            /** Format: date */
            noRegenDeclaredDate: string | null;
            /** Format: int32 */
            noRegenOffsetYears: number | null;
            /** Format: date */
            noRegenDueDate: string | null;
            /** Format: date */
            freeGrowingDeclaredDate: string | null;
            /** Format: int32 */
            freeGrowingOffsetYears: number | null;
            /** Format: date */
            freeGrowingDueDate: string | null;
            noRegenIndicated: boolean;
            extentDeclared: boolean;
            comments: components["schemas"]["CommentDto"][];
        };
        OpeningDetailsStockingDto: {
            stocking: components["schemas"]["OpeningDetailsStockingDetailsDto"];
            preferredSpecies: components["schemas"]["OpeningDetailsStockingSpeciesDto"][];
            acceptableSpecies: components["schemas"]["OpeningDetailsStockingSpeciesDto"][];
            layers: components["schemas"]["OpeningDetailsStockingLayerDto"][];
            comments: components["schemas"]["CommentDto"][];
        };
        OpeningDetailsStockingLayerDto: {
            layer: components["schemas"]["CodeDescriptionDto"];
            /** Format: int64 */
            minWellspacedTrees: number | null;
            /** Format: int64 */
            minPreferredWellspacedTrees: number | null;
            /** Format: int64 */
            minHorizontalDistanceWellspacedTrees: number | null;
            /** Format: int64 */
            targetWellspacedTrees: number | null;
            /** Format: int64 */
            minResidualBasalArea: number | null;
            /** Format: int64 */
            minPostspacingDensity: number | null;
            /** Format: int64 */
            maxPostspacingDensity: number | null;
            /** Format: int64 */
            maxConiferous: number | null;
            /** Format: int64 */
            heightRelativeToComp: number | null;
        };
        OpeningDetailsStockingSpeciesDto: {
            layer: string | null;
            species: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            minHeight: number | null;
        };
        ForestClientLocationDto: {
            clientNumber: string | null;
            locationCode: string | null;
            locationName: string | null;
            companyCode: string | null;
            address1: string | null;
            address2: string | null;
            address3: string | null;
            city: string | null;
            province: string | null;
            postalCode: string | null;
            country: string | null;
            businessPhone: string | null;
            homePhone: string | null;
            cellPhone: string | null;
            faxNumber: string | null;
            email: string | null;
            /** @enum {string|null} */
            expired: "Y" | "N" | null;
            /** @enum {string|null} */
            trusted: "Y" | "N" | null;
            /** Format: date */
            returnedMailDate: string | null;
            comment: string | null;
        };
        OpeningDetailsActivitiesDisturbanceDto: {
            /** Format: int64 */
            atuId: number;
            disturbance: components["schemas"]["CodeDescriptionDto"];
            system: components["schemas"]["CodeDescriptionDto"];
            variant: components["schemas"]["CodeDescriptionDto"];
            cutPhase: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            disturbanceArea: number | null;
            /** Format: date */
            lastUpdate: string | null;
            /** Format: date */
            startDate: string | null;
            /** Format: date */
            endDate: string | null;
            licenseeActivityId: string | null;
            forestClient: components["schemas"]["ForestClientDto"];
            forestClientLocation: components["schemas"]["ForestClientLocationDto"];
            licenceNumber: string | null;
            cuttingPermitId: string | null;
            cutBlock: string | null;
            comments: components["schemas"]["CommentDto"][];
        };
        PageMetadata: {
            /** Format: int64 */
            size?: number;
            /** Format: int64 */
            number?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int64 */
            totalPages?: number;
        };
        PagedModelOpeningDetailsActivitiesDisturbanceDto: {
            content?: components["schemas"]["OpeningDetailsActivitiesDisturbanceDto"][];
            page?: components["schemas"]["PageMetadata"];
        };
        OpeningForestCoverDto: {
            /** Format: int64 */
            coverId: number;
            polygonId: string;
            standardUnitId: string | null;
            unmappedArea: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            grossArea: number;
            /** Format: float */
            netArea: number;
            status: components["schemas"]["CodeDescriptionDto"];
            coverType: components["schemas"]["CodeDescriptionDto"];
            inventoryLayer: components["schemas"]["OpeningForestCoverLayerListDescriptionDto"];
            silvicultureLayer: components["schemas"]["OpeningForestCoverLayerListDescriptionDto"];
            /** Format: int32 */
            referenceYear: number;
        };
        OpeningForestCoverLayerListDescriptionDto: {
            species: components["schemas"]["CodeDescriptionDto"][];
            /** Format: float */
            total: number | null;
            /** Format: float */
            totalWellSpaced: number | null;
            /** Format: float */
            wellSpaced: number | null;
            /** Format: float */
            freeGrowing: number | null;
        };
        OpeningForestCoverDamageDto: {
            damageAgent: components["schemas"]["CodeDescriptionDto"];
            /** Format: int32 */
            healthIncidencePercentage: number | null;
            /** Format: float */
            incidenceArea: number | null;
        };
        OpeningForestCoverDetailedSpeciesDto: {
            species: components["schemas"]["CodeDescriptionDto"];
            /** Format: int64 */
            percentage: number | null;
            /** Format: int64 */
            averageAge: number | null;
            /** Format: int64 */
            averageHeight: number | null;
        };
        OpeningForestCoverDetailsDto: {
            polygon: components["schemas"]["OpeningForestCoverPolygonDto"];
            unmapped: components["schemas"]["OpeningForestCoverUnmappedDto"];
            layers: components["schemas"]["OpeningForestCoverLayerDto"][];
        };
        OpeningForestCoverLayerDto: {
            /** Format: int64 */
            layerId: number;
            layer: components["schemas"]["CodeDescriptionDto"];
            /** Format: int64 */
            crownClosure: number | null;
            /** Format: int64 */
            basalAreaSt: number | null;
            /** Format: int64 */
            totalStems: number | null;
            /** Format: int64 */
            totalWellSpaced: number | null;
            /** Format: int64 */
            wellSpaced: number | null;
            /** Format: int64 */
            freeGrowing: number | null;
            species: components["schemas"]["OpeningForestCoverDetailedSpeciesDto"][];
            damage: components["schemas"]["OpeningForestCoverDamageDto"];
        };
        OpeningForestCoverPolygonDto: {
            /** Format: int64 */
            forestCoverId: number;
            reserve: components["schemas"]["CodeDescriptionDto"];
            objective: components["schemas"]["CodeDescriptionDto"];
            siteClass: components["schemas"]["CodeDescriptionDto"];
            /** Format: int64 */
            siteIndex: number | null;
            siteIndexSource: components["schemas"]["CodeDescriptionDto"];
            treeCoverPattern: components["schemas"]["CodeDescriptionDto"];
            /** Format: int64 */
            reentryYear: number | null;
        };
        OpeningForestCoverUnmappedDto: {
            /** Format: int64 */
            unmappedAreaId: number;
            /** Format: float */
            area: number | null;
            stockingStatus: components["schemas"]["CodeDescriptionDto"];
            stockingType: components["schemas"]["CodeDescriptionDto"];
        };
        OpeningDetailsActivitiesActivitiesDto: {
            /** Format: int64 */
            atuId: number;
            status: components["schemas"]["CodeDescriptionDto"];
            base: components["schemas"]["CodeDescriptionDto"];
            tech: components["schemas"]["CodeDescriptionDto"];
            method: components["schemas"]["CodeDescriptionDto"];
            objective1: components["schemas"]["CodeDescriptionDto"];
            objective2: components["schemas"]["CodeDescriptionDto"];
            objective3: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            area: number | null;
            funding: components["schemas"]["CodeDescriptionDto"];
            projectId: string | null;
            /** Format: date */
            lastUpdate: string | null;
            /** Format: date */
            plannedDate: string | null;
            /** Format: date */
            endDate: string | null;
        };
        PagedModelOpeningDetailsActivitiesActivitiesDto: {
            content?: components["schemas"]["OpeningDetailsActivitiesActivitiesDto"][];
            page?: components["schemas"]["PageMetadata"];
        };
        OpeningActivityBaseDto: {
            licenseeActivityId: string | null;
            intraAgencyNumber: string | null;
            activityClient: components["schemas"]["ForestClientDto"];
            activityLocation: components["schemas"]["ForestClientLocationDto"];
            /** Format: float */
            plannedAmount: number | null;
            /** Format: float */
            treatedAmount: number | null;
            /** Format: float */
            plannedCost: number | null;
            /** Format: float */
            actualCost: number | null;
            /** Format: int64 */
            totalPlanting: number | null;
            comments: components["schemas"]["CommentDto"][];
        };
        OpeningSearchResponseDto: {
            /** Format: int64 */
            openingId: number;
            openingNumber: string | null;
            category: components["schemas"]["CodeDescriptionDto"];
            status: components["schemas"]["CodeDescriptionDto"];
            cuttingPermitId: string | null;
            timberMark: string | null;
            cutBlockId: string | null;
            openingGrossAreaHa: number | null;
            /** Format: date */
            disturbanceStartDate: string | null;
            orgUnitCode: string;
            orgUnitName: string;
            clientNumber: string | null;
            clientLocation: string | null;
            clientAcronym: string | null;
            clientName: string | null;
            /** Format: date */
            regenDelayDate: string;
            /** Format: date */
            earlyFreeGrowingDate: string | null;
            /** Format: date */
            lateFreeGrowingDate: string | null;
            /** Format: date-time */
            updateTimestamp: string;
            entryUserId: string;
            submittedToFrpa: boolean;
            forestFileId: string | null;
            /** Format: int64 */
            silvaReliefAppId: number | null;
            /** Format: date-time */
            lastViewDate: string | null;
            favourite: boolean;
            valid?: boolean;
        };
        PagedModelOpeningSearchResponseDto: {
            content?: components["schemas"]["OpeningSearchResponseDto"][];
            page?: components["schemas"]["PageMetadata"];
        };
        Crs: {
            /** @enum {string} */
            type?: "name" | "link";
            properties?: {
                [key: string]: unknown;
            };
        };
        Feature: {
            crs?: components["schemas"]["Crs"];
            bbox?: number[];
            properties?: {
                [key: string]: unknown;
            };
            geometry?: components["schemas"]["Feature"] | components["schemas"]["FeatureCollection"] | components["schemas"]["GeometryCollection"] | components["schemas"]["LineString"] | components["schemas"]["MultiLineString"] | components["schemas"]["MultiPoint"] | components["schemas"]["MultiPolygon"] | components["schemas"]["Point"] | components["schemas"]["Polygon"];
            id?: string;
        };
        FeatureCollection: {
            crs?: components["schemas"]["Crs"];
            bbox?: number[];
            features?: components["schemas"]["Feature"][];
        };
        GeoJsonObject: {
            crs?: components["schemas"]["Crs"];
            bbox?: number[];
            type: string;
        };
        GeometryCollection: {
            type: "GeometryCollection";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            geometries?: (components["schemas"]["Feature"] | components["schemas"]["FeatureCollection"] | components["schemas"]["GeometryCollection"] | components["schemas"]["LineString"] | components["schemas"]["MultiLineString"] | components["schemas"]["MultiPoint"] | components["schemas"]["MultiPolygon"] | components["schemas"]["Point"] | components["schemas"]["Polygon"])[];
        });
        LineString: {
            type: "LineString";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][];
        });
        LngLatAlt: {
            /** Format: double */
            longitude?: number;
            /** Format: double */
            latitude?: number;
            /** Format: double */
            altitude?: number;
            additionalElements?: number[];
        };
        MultiLineString: {
            type: "MultiLineString";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][][];
        });
        MultiPoint: {
            type: "MultiPoint";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][];
        });
        MultiPolygon: {
            type: "MultiPolygon";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][][][];
        });
        Point: {
            type: "Point";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"];
        });
        Polygon: {
            type: "Polygon";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][][];
        });
        ForestClientAutocompleteResultDto: {
            id?: string;
            name?: string;
            acronym?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type OpeningsPerYearDto = components['schemas']['OpeningsPerYearDto'];
export type CodeDescriptionDto = components['schemas']['CodeDescriptionDto'];
export type CommentDto = components['schemas']['CommentDto'];
export type ForestClientDto = components['schemas']['ForestClientDto'];
export type OpeningDetailsNotificationDto = components['schemas']['OpeningDetailsNotificationDto'];
export type OpeningDetailsOverviewDto = components['schemas']['OpeningDetailsOverviewDto'];
export type OpeningDetailsOverviewMilestoneDto = components['schemas']['OpeningDetailsOverviewMilestoneDto'];
export type OpeningDetailsOverviewOpeningDto = components['schemas']['OpeningDetailsOverviewOpeningDto'];
export type OpeningDetailsTombstoneDto = components['schemas']['OpeningDetailsTombstoneDto'];
export type OpeningDetailsTombstoneOverviewDto = components['schemas']['OpeningDetailsTombstoneOverviewDto'];
export type Pageable = components['schemas']['Pageable'];
export type OpeningDetailsTenureDto = components['schemas']['OpeningDetailsTenureDto'];
export type OpeningDetailsTenuresDto = components['schemas']['OpeningDetailsTenuresDto'];
export type SimplePageDto = components['schemas']['SimplePageDto'];
export type OpeningDetailsBecDto = components['schemas']['OpeningDetailsBecDto'];
export type OpeningDetailsStockingDetailsDto = components['schemas']['OpeningDetailsStockingDetailsDto'];
export type OpeningDetailsStockingDetailsMilestoneDto = components['schemas']['OpeningDetailsStockingDetailsMilestoneDto'];
export type OpeningDetailsStockingDto = components['schemas']['OpeningDetailsStockingDto'];
export type OpeningDetailsStockingLayerDto = components['schemas']['OpeningDetailsStockingLayerDto'];
export type OpeningDetailsStockingSpeciesDto = components['schemas']['OpeningDetailsStockingSpeciesDto'];
export type ForestClientLocationDto = components['schemas']['ForestClientLocationDto'];
export type OpeningDetailsActivitiesDisturbanceDto = components['schemas']['OpeningDetailsActivitiesDisturbanceDto'];
export type PageMetadata = components['schemas']['PageMetadata'];
export type PagedModelOpeningDetailsActivitiesDisturbanceDto = components['schemas']['PagedModelOpeningDetailsActivitiesDisturbanceDto'];
export type OpeningForestCoverDto = components['schemas']['OpeningForestCoverDto'];
export type OpeningForestCoverLayerListDescriptionDto = components['schemas']['OpeningForestCoverLayerListDescriptionDto'];
export type OpeningForestCoverDamageDto = components['schemas']['OpeningForestCoverDamageDto'];
export type OpeningForestCoverDetailedSpeciesDto = components['schemas']['OpeningForestCoverDetailedSpeciesDto'];
export type OpeningForestCoverDetailsDto = components['schemas']['OpeningForestCoverDetailsDto'];
export type OpeningForestCoverLayerDto = components['schemas']['OpeningForestCoverLayerDto'];
export type OpeningForestCoverPolygonDto = components['schemas']['OpeningForestCoverPolygonDto'];
export type OpeningForestCoverUnmappedDto = components['schemas']['OpeningForestCoverUnmappedDto'];
export type OpeningDetailsActivitiesActivitiesDto = components['schemas']['OpeningDetailsActivitiesActivitiesDto'];
export type PagedModelOpeningDetailsActivitiesActivitiesDto = components['schemas']['PagedModelOpeningDetailsActivitiesActivitiesDto'];
export type OpeningActivityBaseDto = components['schemas']['OpeningActivityBaseDto'];
export type OpeningSearchResponseDto = components['schemas']['OpeningSearchResponseDto'];
export type PagedModelOpeningSearchResponseDto = components['schemas']['PagedModelOpeningSearchResponseDto'];
export type Crs = components['schemas']['Crs'];
export type Feature = components['schemas']['Feature'];
export type FeatureCollection = components['schemas']['FeatureCollection'];
export type GeoJsonObject = components['schemas']['GeoJsonObject'];
export type GeometryCollection = components['schemas']['GeometryCollection'];
export type LineString = components['schemas']['LineString'];
export type LngLatAlt = components['schemas']['LngLatAlt'];
export type MultiLineString = components['schemas']['MultiLineString'];
export type MultiPoint = components['schemas']['MultiPoint'];
export type MultiPolygon = components['schemas']['MultiPolygon'];
export type Point = components['schemas']['Point'];
export type Polygon = components['schemas']['Polygon'];
export type ForestClientAutocompleteResultDto = components['schemas']['ForestClientAutocompleteResultDto'];
export type $defs = Record<string, never>;
export interface operations {
    recordUserViewedOpening: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkFavorite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    addToFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeFromFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOpeningsSubmissionTrends: {
        parameters: {
            query?: {
                orgUnitCode?: string[];
                statusCode?: string[];
                entryDateStart?: string;
                entryDateEnd?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningsPerYearDto"][];
                };
            };
        };
    };
    getOpeningTombstone: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningDetailsTombstoneOverviewDto"];
                };
            };
        };
    };
    getTenures: {
        parameters: {
            query: {
                filter?: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningDetailsTenuresDto"];
                };
            };
        };
    };
    getOpeningSsu: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningDetailsStockingDto"][];
                };
            };
        };
    };
    getOpeningDisturbances: {
        parameters: {
            query: {
                allRequestParams: {
                    [key: string]: string;
                };
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelOpeningDetailsActivitiesDisturbanceDto"];
                };
            };
        };
    };
    getCover: {
        parameters: {
            query?: {
                mainSearchTerm?: string;
            };
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningForestCoverDto"][];
                };
            };
        };
    };
    getCoverDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
                forestCoverId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningForestCoverDetailsDto"];
                };
            };
        };
    };
    getOpeningActivities: {
        parameters: {
            query: {
                filter?: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelOpeningDetailsActivitiesActivitiesDto"];
                };
            };
        };
    };
    getOpeningActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
                atuId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningActivityBaseDto"];
                };
            };
        };
    };
    openingSearch: {
        parameters: {
            query: {
                mainSearchTerm?: string;
                orgUnit?: string[];
                category?: string[];
                statusList?: string[];
                myOpenings?: boolean;
                submittedToFrpa?: boolean;
                disturbanceDateStart?: string;
                disturbanceDateEnd?: string;
                regenDelayDateStart?: string;
                regenDelayDateEnd?: string;
                freeGrowingDateStart?: string;
                freeGrowingDateEnd?: string;
                updateDateStart?: string;
                updateDateEnd?: string;
                cuttingPermitId?: string;
                cutBlockId?: string;
                clientLocationCode?: string;
                clientNumber?: string;
                timberMark?: string;
                paginationParameters: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelOpeningSearchResponseDto"];
                };
            };
        };
    };
    getUserRecentOpenings: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelOpeningSearchResponseDto"];
                };
            };
        };
    };
    getOpeningPolygonAndProperties: {
        parameters: {
            query?: {
                kind?: string;
            };
            header?: never;
            path: {
                openingId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FeatureCollection"];
                };
            };
        };
    };
    getFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number[];
                };
            };
        };
    };
    getForestClient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ForestClientDto"];
                };
            };
        };
    };
    getForestClientLocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CodeDescriptionDto"][];
                };
            };
        };
    };
    searchForestClients: {
        parameters: {
            query: {
                page?: number;
                size?: number;
                value: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ForestClientAutocompleteResultDto"][];
                };
            };
        };
    };
    getOpeningOrgUnits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CodeDescriptionDto"][];
                };
            };
        };
    };
    getOpeningCategories: {
        parameters: {
            query?: {
                includeExpired?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CodeDescriptionDto"][];
                };
            };
        };
    };
}
