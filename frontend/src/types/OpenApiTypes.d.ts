/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/api/openings/recent/{openingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["recordUserViewedOpening"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/favourites/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["checkFavorite"];
        put: operations["addToFavorites"];
        post?: never;
        delete: operations["removeFromFavorites"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/submission-trends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningsSubmissionTrends"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/tombstone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningTombstone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/tenures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTenures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/ssu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningSsu"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/disturbances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningDisturbances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningActivities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/{openingId}/activities/{atuId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningActivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["openingSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserRecentOpenings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/map/{openingId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningPolygonAndProperties"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openings/favourites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFavorites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forest-clients/{clientNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getForestClient"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forest-clients/{clientNumber}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getForestClientLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forest-clients/byNameAcronymNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchForestClients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/codes/org-units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningOrgUnits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/codes/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOpeningCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        OpeningsPerYearDto: {
            /** Format: int32 */
            month?: number;
            /** Format: int32 */
            year?: number;
            /** Format: int64 */
            amount?: number;
            statusCounts?: {
                [key: string]: number;
            };
        };
        CodeDescriptionDto: {
            code?: string;
            description?: string;
        };
        CommentDto: {
            commentSource?: components["schemas"]["CodeDescriptionDto"];
            commentType?: components["schemas"]["CodeDescriptionDto"];
            commentText?: string;
        };
        ForestClientDto: {
            clientNumber?: string;
            clientName?: string;
            legalFirstName?: string;
            legalMiddleName?: string;
            clientStatusCode?: components["schemas"]["CodeDescriptionDto"];
            clientTypeCode?: components["schemas"]["CodeDescriptionDto"];
            acronym?: string;
            name?: string;
        };
        OpeningDetailsOverviewDto: {
            opening?: components["schemas"]["OpeningDetailsOverviewOpeningDto"];
            milestones?: components["schemas"]["OpeningDetailsOverviewMilestoneDto"];
        };
        OpeningDetailsOverviewMilestoneDto: {
            standardsUnitId?: string;
            /** Format: date */
            postHarvestDeclaredDate?: string;
            /** Format: date */
            regenDeclaredDate?: string;
            /** Format: int32 */
            regenOffsetYears?: number;
            /** Format: date */
            regenDueDate?: string;
            /** Format: date */
            freeGrowingDeclaredDate?: string;
            /** Format: int32 */
            freeGrowingOffsetYears?: number;
            /** Format: date */
            freeGrowingDueDate?: string;
        };
        OpeningDetailsOverviewOpeningDto: {
            licenseeId?: string;
            tenureType?: components["schemas"]["CodeDescriptionDto"];
            managementUnitType?: components["schemas"]["CodeDescriptionDto"];
            managementUnitId?: string;
            timberSaleOffice?: components["schemas"]["CodeDescriptionDto"];
            comments?: components["schemas"]["CommentDto"][];
        };
        OpeningDetailsTombstoneDto: {
            openingNumber?: string;
            openingStatus?: components["schemas"]["CodeDescriptionDto"];
            orgUnitCode?: string;
            orgUnitName?: string;
            openCategory?: components["schemas"]["CodeDescriptionDto"];
            client?: components["schemas"]["ForestClientDto"];
            fileId?: string;
            cutBlockID?: string;
            cuttingPermitId?: string;
            timberMark?: string;
            maxAllowedAccess?: string;
            /** Format: float */
            openingGrossArea?: number;
            createdBy?: string;
            /** Format: date */
            createdOn?: string;
            /** Format: date */
            lastUpdatedOn?: string;
            /** Format: date */
            disturbanceStartDate?: string;
        };
        OpeningDetailsTombstoneOverviewDto: {
            /** Format: int64 */
            openingId?: number;
            tombstone?: components["schemas"]["OpeningDetailsTombstoneDto"];
            overview?: components["schemas"]["OpeningDetailsOverviewDto"];
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        OpeningDetailsTenureDto: {
            /** Format: int64 */
            id?: number;
            primaryTenure?: boolean;
            fileId?: string;
            cutBlock?: string;
            cuttingPermit?: string;
            timberMark?: string;
            status?: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            plannedGrossArea?: number;
            /** Format: float */
            plannedNetArea?: number;
        };
        OpeningDetailsTenuresDto: {
            primary?: components["schemas"]["OpeningDetailsTenureDto"];
            content?: components["schemas"]["OpeningDetailsTenureDto"][];
            page?: components["schemas"]["SimplePageDto"];
            /** Format: int64 */
            totalUnfiltered?: number;
        };
        SimplePageDto: {
            /** Format: int64 */
            size?: number;
            /** Format: int64 */
            number?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int64 */
            totalPages?: number;
        };
        OpeningDetailsBecDto: {
            becZoneCode?: string;
            becSubzoneCode?: string;
            becVariant?: string;
            becPhase?: string;
            becSiteSeries?: string;
            becSiteType?: string;
            becSeral?: string;
        };
        OpeningDetailsStockingDetailsDto: {
            stockingStandardUnit?: string;
            /** Format: int64 */
            ssid?: number;
            defaultMof?: boolean;
            manualEntry?: boolean;
            /** Format: int64 */
            fspId?: number;
            /** Format: float */
            netArea?: number;
            /** Format: float */
            soilDisturbancePercent?: number;
            bec?: components["schemas"]["OpeningDetailsBecDto"];
            /** Format: int64 */
            regenDelay?: number;
            /** Format: int64 */
            freeGrowingLate?: number;
            /** Format: int64 */
            freeGrowingEarly?: number;
            additionalStandards?: string;
        };
        OpeningDetailsStockingDto: {
            stocking?: components["schemas"]["OpeningDetailsStockingDetailsDto"];
            preferredSpecies?: components["schemas"]["OpeningDetailsStockingSpeciesDto"][];
            acceptableSpecies?: components["schemas"]["OpeningDetailsStockingSpeciesDto"][];
            layers?: components["schemas"]["OpeningDetailsStockingLayerDto"][];
            comments?: components["schemas"]["CommentDto"][];
        };
        OpeningDetailsStockingLayerDto: {
            layer?: components["schemas"]["CodeDescriptionDto"];
            /** Format: int64 */
            minWellspacedTrees?: number;
            /** Format: int64 */
            minPreferredWellspacedTrees?: number;
            /** Format: int64 */
            minHorizontalDistanceWellspacedTrees?: number;
            /** Format: int64 */
            targetWellspacedTrees?: number;
            /** Format: int64 */
            minResidualBasalArea?: number;
            /** Format: int64 */
            minPostspacingDensity?: number;
            /** Format: int64 */
            maxPostspacingDensity?: number;
            /** Format: int64 */
            maxConiferous?: number;
            /** Format: int64 */
            heightRelativeToComp?: number;
        };
        OpeningDetailsStockingSpeciesDto: {
            layer?: string;
            species?: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            minHeight?: number;
        };
        ForestClientLocationDto: {
            clientNumber?: string;
            locationCode?: string;
            locationName?: string;
            companyCode?: string;
            address1?: string;
            address2?: string;
            address3?: string;
            city?: string;
            province?: string;
            postalCode?: string;
            country?: string;
            businessPhone?: string;
            homePhone?: string;
            cellPhone?: string;
            faxNumber?: string;
            email?: string;
            /** @enum {string} */
            expired?: "Y" | "N";
            /** @enum {string} */
            trusted?: "Y" | "N";
            /** Format: date */
            returnedMailDate?: string;
            comment?: string;
        };
        OpeningDetailsActivitiesDisturbanceDto: {
            /** Format: int64 */
            atuId?: number;
            disturbance?: components["schemas"]["CodeDescriptionDto"];
            system?: components["schemas"]["CodeDescriptionDto"];
            variant?: components["schemas"]["CodeDescriptionDto"];
            cutPhase?: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            disturbanceArea?: number;
            /** Format: date */
            lastUpdate?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            licenseeActivityId?: string;
            forestClient?: components["schemas"]["ForestClientDto"];
            forestClientLocation?: components["schemas"]["ForestClientLocationDto"];
            licenceNumber?: string;
            cuttingPermitId?: string;
            cutBlock?: string;
            comments?: components["schemas"]["CommentDto"][];
        };
        PageMetadata: {
            /** Format: int64 */
            size?: number;
            /** Format: int64 */
            number?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int64 */
            totalPages?: number;
        };
        PagedModelOpeningDetailsActivitiesDisturbanceDto: {
            content?: components["schemas"]["OpeningDetailsActivitiesDisturbanceDto"][];
            page?: components["schemas"]["PageMetadata"];
        };
        OpeningDetailsActivitiesActivitiesDto: {
            /** Format: int64 */
            atuId?: number;
            status?: components["schemas"]["CodeDescriptionDto"];
            base?: components["schemas"]["CodeDescriptionDto"];
            tech?: components["schemas"]["CodeDescriptionDto"];
            method?: components["schemas"]["CodeDescriptionDto"];
            objective1?: components["schemas"]["CodeDescriptionDto"];
            objective2?: components["schemas"]["CodeDescriptionDto"];
            objective3?: components["schemas"]["CodeDescriptionDto"];
            /** Format: float */
            area?: number;
            funding?: components["schemas"]["CodeDescriptionDto"];
            projectId?: string;
            /** Format: date */
            lastUpdate?: string;
            /** Format: date */
            plannedDate?: string;
            /** Format: date */
            endDate?: string;
        };
        PagedModelOpeningDetailsActivitiesActivitiesDto: {
            content?: components["schemas"]["OpeningDetailsActivitiesActivitiesDto"][];
            page?: components["schemas"]["PageMetadata"];
        };
        OpeningActivityBaseDto: {
            licenseeActivityId?: string;
            intraAgencyNumber?: string;
            activityClient?: components["schemas"]["ForestClientDto"];
            activityLocation?: components["schemas"]["ForestClientLocationDto"];
            /** Format: float */
            plannedAmount?: number;
            /** Format: float */
            treatedAmount?: number;
            /** Format: float */
            plannedCost?: number;
            /** Format: float */
            actualCost?: number;
            /** Format: int64 */
            totalPlanting?: number;
            comments?: components["schemas"]["CommentDto"][];
        };
        OpeningSearchResponseDto: {
            /** Format: int64 */
            openingId?: number;
            openingNumber?: string;
            category?: components["schemas"]["CodeDescriptionDto"];
            status?: components["schemas"]["CodeDescriptionDto"];
            cuttingPermitId?: string;
            timberMark?: string;
            cutBlockId?: string;
            openingGrossAreaHa?: number;
            /** Format: date */
            disturbanceStartDate?: string;
            orgUnitCode?: string;
            orgUnitName?: string;
            clientNumber?: string;
            clientLocation?: string;
            clientAcronym?: string;
            clientName?: string;
            /** Format: date */
            regenDelayDate?: string;
            /** Format: date */
            earlyFreeGrowingDate?: string;
            /** Format: date */
            lateFreeGrowingDate?: string;
            /** Format: date-time */
            updateTimestamp?: string;
            entryUserId?: string;
            submittedToFrpa?: boolean;
            forestFileId?: string;
            /** Format: int64 */
            silvaReliefAppId?: number;
            /** Format: date-time */
            lastViewDate?: string;
            favourite?: boolean;
            valid?: boolean;
        };
        PagedModelOpeningSearchResponseDto: {
            content?: components["schemas"]["OpeningSearchResponseDto"][];
            page?: components["schemas"]["PageMetadata"];
        };
        Crs: {
            /** @enum {string} */
            type?: "name" | "link";
            properties?: {
                [key: string]: unknown;
            };
        };
        Feature: {
            crs?: components["schemas"]["Crs"];
            bbox?: number[];
            properties?: {
                [key: string]: unknown;
            };
            geometry?: components["schemas"]["Feature"] | components["schemas"]["FeatureCollection"] | components["schemas"]["GeometryCollection"] | components["schemas"]["LineString"] | components["schemas"]["MultiLineString"] | components["schemas"]["MultiPoint"] | components["schemas"]["MultiPolygon"] | components["schemas"]["Point"] | components["schemas"]["Polygon"];
            id?: string;
        };
        FeatureCollection: {
            crs?: components["schemas"]["Crs"];
            bbox?: number[];
            features?: components["schemas"]["Feature"][];
        };
        GeoJsonObject: {
            crs?: components["schemas"]["Crs"];
            bbox?: number[];
            type: string;
        };
        GeometryCollection: {
            type: "GeometryCollection";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            geometries?: (components["schemas"]["Feature"] | components["schemas"]["FeatureCollection"] | components["schemas"]["GeometryCollection"] | components["schemas"]["LineString"] | components["schemas"]["MultiLineString"] | components["schemas"]["MultiPoint"] | components["schemas"]["MultiPolygon"] | components["schemas"]["Point"] | components["schemas"]["Polygon"])[];
        });
        LineString: {
            type: "LineString";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][];
        });
        LngLatAlt: {
            /** Format: double */
            longitude?: number;
            /** Format: double */
            latitude?: number;
            /** Format: double */
            altitude?: number;
            additionalElements?: number[];
        };
        MultiLineString: {
            type: "MultiLineString";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][][];
        });
        MultiPoint: {
            type: "MultiPoint";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][];
        });
        MultiPolygon: {
            type: "MultiPolygon";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][][][];
        });
        Point: {
            type: "Point";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"];
        });
        Polygon: {
            type: "Polygon";
        } & (Omit<components["schemas"]["GeoJsonObject"], "type"> & {
            coordinates?: components["schemas"]["LngLatAlt"][][];
        });
        ForestClientAutocompleteResultDto: {
            id?: string;
            name?: string;
            acronym?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type OpeningsPerYearDto = components['schemas']['OpeningsPerYearDto'];
export type CodeDescriptionDto = components['schemas']['CodeDescriptionDto'];
export type CommentDto = components['schemas']['CommentDto'];
export type ForestClientDto = components['schemas']['ForestClientDto'];
export type OpeningDetailsOverviewDto = components['schemas']['OpeningDetailsOverviewDto'];
export type OpeningDetailsOverviewMilestoneDto = components['schemas']['OpeningDetailsOverviewMilestoneDto'];
export type OpeningDetailsOverviewOpeningDto = components['schemas']['OpeningDetailsOverviewOpeningDto'];
export type OpeningDetailsTombstoneDto = components['schemas']['OpeningDetailsTombstoneDto'];
export type OpeningDetailsTombstoneOverviewDto = components['schemas']['OpeningDetailsTombstoneOverviewDto'];
export type Pageable = components['schemas']['Pageable'];
export type OpeningDetailsTenureDto = components['schemas']['OpeningDetailsTenureDto'];
export type OpeningDetailsTenuresDto = components['schemas']['OpeningDetailsTenuresDto'];
export type SimplePageDto = components['schemas']['SimplePageDto'];
export type OpeningDetailsBecDto = components['schemas']['OpeningDetailsBecDto'];
export type OpeningDetailsStockingDetailsDto = components['schemas']['OpeningDetailsStockingDetailsDto'];
export type OpeningDetailsStockingDto = components['schemas']['OpeningDetailsStockingDto'];
export type OpeningDetailsStockingLayerDto = components['schemas']['OpeningDetailsStockingLayerDto'];
export type OpeningDetailsStockingSpeciesDto = components['schemas']['OpeningDetailsStockingSpeciesDto'];
export type ForestClientLocationDto = components['schemas']['ForestClientLocationDto'];
export type OpeningDetailsActivitiesDisturbanceDto = components['schemas']['OpeningDetailsActivitiesDisturbanceDto'];
export type PageMetadata = components['schemas']['PageMetadata'];
export type PagedModelOpeningDetailsActivitiesDisturbanceDto = components['schemas']['PagedModelOpeningDetailsActivitiesDisturbanceDto'];
export type OpeningDetailsActivitiesActivitiesDto = components['schemas']['OpeningDetailsActivitiesActivitiesDto'];
export type PagedModelOpeningDetailsActivitiesActivitiesDto = components['schemas']['PagedModelOpeningDetailsActivitiesActivitiesDto'];
export type OpeningActivityBaseDto = components['schemas']['OpeningActivityBaseDto'];
export type OpeningSearchResponseDto = components['schemas']['OpeningSearchResponseDto'];
export type PagedModelOpeningSearchResponseDto = components['schemas']['PagedModelOpeningSearchResponseDto'];
export type Crs = components['schemas']['Crs'];
export type Feature = components['schemas']['Feature'];
export type FeatureCollection = components['schemas']['FeatureCollection'];
export type GeoJsonObject = components['schemas']['GeoJsonObject'];
export type GeometryCollection = components['schemas']['GeometryCollection'];
export type LineString = components['schemas']['LineString'];
export type LngLatAlt = components['schemas']['LngLatAlt'];
export type MultiLineString = components['schemas']['MultiLineString'];
export type MultiPoint = components['schemas']['MultiPoint'];
export type MultiPolygon = components['schemas']['MultiPolygon'];
export type Point = components['schemas']['Point'];
export type Polygon = components['schemas']['Polygon'];
export type ForestClientAutocompleteResultDto = components['schemas']['ForestClientAutocompleteResultDto'];
export type $defs = Record<string, never>;
export interface operations {
    recordUserViewedOpening: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    checkFavorite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    addToFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeFromFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOpeningsSubmissionTrends: {
        parameters: {
            query?: {
                orgUnitCode?: string[];
                statusCode?: string[];
                entryDateStart?: string;
                entryDateEnd?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningsPerYearDto"][];
                };
            };
        };
    };
    getOpeningTombstone: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningDetailsTombstoneOverviewDto"];
                };
            };
        };
    };
    getTenures: {
        parameters: {
            query: {
                filter?: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningDetailsTenuresDto"];
                };
            };
        };
    };
    getOpeningSsu: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningDetailsStockingDto"][];
                };
            };
        };
    };
    getOpeningDisturbances: {
        parameters: {
            query: {
                allRequestParams: {
                    [key: string]: string;
                };
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelOpeningDetailsActivitiesDisturbanceDto"];
                };
            };
        };
    };
    getOpeningActivities: {
        parameters: {
            query: {
                filter?: string;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path: {
                openingId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelOpeningDetailsActivitiesActivitiesDto"];
                };
            };
        };
    };
    getOpeningActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                openingId: number;
                atuId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OpeningActivityBaseDto"];
                };
            };
        };
    };
    openingSearch: {
        parameters: {
            query: {
                mainSearchTerm?: string;
                orgUnit?: string[];
                category?: string[];
                statusList?: string[];
                myOpenings?: boolean;
                submittedToFrpa?: boolean;
                disturbanceDateStart?: string;
                disturbanceDateEnd?: string;
                regenDelayDateStart?: string;
                regenDelayDateEnd?: string;
                freeGrowingDateStart?: string;
                freeGrowingDateEnd?: string;
                updateDateStart?: string;
                updateDateEnd?: string;
                cuttingPermitId?: string;
                cutBlockId?: string;
                clientLocationCode?: string;
                clientNumber?: string;
                timberMark?: string;
                paginationParameters: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelOpeningSearchResponseDto"];
                };
            };
        };
    };
    getUserRecentOpenings: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PagedModelOpeningSearchResponseDto"];
                };
            };
        };
    };
    getOpeningPolygonAndProperties: {
        parameters: {
            query?: {
                kind?: string;
            };
            header?: never;
            path: {
                openingId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FeatureCollection"];
                };
            };
        };
    };
    getFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number[];
                };
            };
        };
    };
    getForestClient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ForestClientDto"];
                };
            };
        };
    };
    getForestClientLocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CodeDescriptionDto"][];
                };
            };
        };
    };
    searchForestClients: {
        parameters: {
            query: {
                page?: number;
                size?: number;
                value: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ForestClientAutocompleteResultDto"][];
                };
            };
        };
    };
    getOpeningOrgUnits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CodeDescriptionDto"][];
                };
            };
        };
    };
    getOpeningCategories: {
        parameters: {
            query?: {
                includeExpired?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CodeDescriptionDto"][];
                };
            };
        };
    };
}
